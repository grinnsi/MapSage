# coding: utf-8

"""
    Building Blocks specified in the OGC API - Features - Part 1 and Part 2: Core and CRS standard

    Common components used in the [OGC API - Features - Part 1: Core corrigendum standard](https://docs.ogc.org/is/17-069r4/17-069r4.html) and [OGC API - Features - Part 2: Coordinate Reference Systems by Reference corrigendum](https://docs.ogc.org/is/18-058r1/18-058r1.html).    OGC API - Features - Part 1: Core corrigendum 1.0.1 is an OGC Standard.   Copyright (c) 2022 Open Geospatial Consortium.   To obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .    OGC API - Features - Part 2: Reference corrigendum 1.0.1 is an OGC Standard.   Copyright (c) 2022 Open Geospatial Consortium.   To obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .    This is an informative document. The building blocks in this document are also available on the OGC schema repository.   [OGC API - Features - Part 1: Core schema](http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml)   [OGC API - Features - Part 2: Coordinate Reference Systems schema](https://schemas.opengis.net/ogcapi/features/part2/1.0/openapi/ogcapi-features-2.yaml)  

    The version of the OpenAPI document: 1.0.1
    Contact: standards-team@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from server.ogc_apis.features.models.extent import Extent
from server.ogc_apis.features.models.link import Link
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Collection(BaseModel):
    """
    Collection
    """ # noqa: E501
    id: StrictStr = Field(description="identifier of the collection used, for example, in URIs")
    title: Optional[StrictStr] = Field(default=None, description="human readable title of the collection")
    description: Optional[StrictStr] = Field(default=None, description="a description of the features in the collection")
    links: List[Link]
    extent: Optional[Extent] = None
    item_type: Optional[StrictStr] = Field(default='feature', description="indicator about the type of the items in the collection (the default value is 'feature').", alias="itemType")
    crs: Optional[List[StrictStr]] = Field(default=None, description="the list of coordinate reference systems supported by the service")
    storage_crs: Optional[StrictStr] = Field(default=None, description="the CRS identifier, from the list of supported CRS identifiers, that may be used to retrieve features from a collection without the need to apply a CRS transformation", alias="storageCrs")
    storage_crs_coordinate_epoch: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="point in time at which coordinates in the spatial feature collection are referenced to the dynamic coordinate reference system in `storageCrs`, that may be used to retrieve features from a collection without the need to apply a change of coordinate epoch. It is expressed as a decimal year in the Gregorian calendar", alias="storageCrsCoordinateEpoch")
    __properties: ClassVar[List[str]] = ["id", "title", "description", "links", "extent", "itemType", "crs", "storageCrs", "storageCrsCoordinateEpoch"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Collection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of extent
        if self.extent:
            _dict['extent'] = self.extent.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Collection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "links": [Link.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None,
            "extent": Extent.from_dict(obj.get("extent")) if obj.get("extent") is not None else None,
            "itemType": obj.get("itemType") if obj.get("itemType") is not None else 'feature',
            "crs": obj.get("crs"),
            "storageCrs": obj.get("storageCrs"),
            "storageCrsCoordinateEpoch": obj.get("storageCrsCoordinateEpoch")
        })
        return _obj


