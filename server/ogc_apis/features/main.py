# coding: utf-8

"""
    Building Blocks specified in the OGC API - Features - Part 1 and Part 2: Core and CRS standard

    Common components used in the [OGC API - Features - Part 1: Core corrigendum standard](https://docs.ogc.org/is/17-069r4/17-069r4.html) and [OGC API - Features - Part 2: Coordinate Reference Systems by Reference corrigendum](https://docs.ogc.org/is/18-058r1/18-058r1.html).    OGC API - Features - Part 1: Core corrigendum 1.0.1 is an OGC Standard.   Copyright (c) 2022 Open Geospatial Consortium.   To obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .    OGC API - Features - Part 2: Reference corrigendum 1.0.1 is an OGC Standard.   Copyright (c) 2022 Open Geospatial Consortium.   To obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .    This is an informative document. The building blocks in this document are also available on the OGC schema repository.   [OGC API - Features - Part 1: Core schema](http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml)   [OGC API - Features - Part 2: Coordinate Reference Systems schema](https://schemas.opengis.net/ogcapi/features/part2/1.0/openapi/ogcapi-features-2.yaml)  

    The version of the OpenAPI document: 1.0.1
    Contact: standards-team@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from contextlib import asynccontextmanager
import os, logging
import markdown
from fastapi import FastAPI
from fastapi.middleware.wsgi import WSGIMiddleware
from fastapi.middleware.cors import CORSMiddleware

from server.ogc_apis.features.apis.capabilities_api import router as CapabilitiesApiRouter
from server.ogc_apis.features.apis.data_api import router as DataApiRouter
from server.database.db import Database

_LOGGER = logging.getLogger("server.api")

def init_api_server() -> FastAPI:
    # Initialize SQLite database after startup of FastAPI server
    @asynccontextmanager
    async def lifespan(app: FastAPI):
        _LOGGER.info("Starting FastAPI server")
        Database.init_sqlite_db(False)
        yield
        _LOGGER.info("Stopping FastAPI server")
    
    app = FastAPI(
        title="Building Blocks specified in the OGC API - Features - Part 1 and Part 2: Core and CRS standard",
        description=markdown.markdown("Common components used in the [OGC API - Features - Part 1: Core corrigendum standard](https://docs.ogc.org/is/17-069r4/17-069r4.html) and [OGC API - Features - Part 2: Coordinate Reference Systems by Reference corrigendum](https://docs.ogc.org/is/18-058r1/18-058r1.html).\n\nOGC API - Features - Part 1: Core corrigendum 1.0.1 is an OGC Standard.\n\nCopyright (c) 2022 Open Geospatial Consortium.\n\nTo obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .\n\nOGC API - Features - Part 2: Reference corrigendum 1.0.1 is an OGC Standard.\n\nCopyright (c) 2022 Open Geospatial Consortium.\n\nTo obtain additional rights of use, visit http://www.opengeospatial.org/legal/ .\n\nThis is an informative document. The building blocks in this document are also available on the OGC schema repository.\n\n[OGC API - Features - Part 1: Core schema](http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/ogcapi-features-1.yaml)\n\n[OGC API - Features - Part 2: Coordinate Reference Systems schema](https://schemas.opengis.net/ogcapi/features/part2/1.0/openapi/ogcapi-features-2.yaml)\n\n"),
        version="1.0.1",
        lifespan=lifespan
    )

    app.include_router(CapabilitiesApiRouter)
    app.include_router(DataApiRouter)
    
    if os.getenv("APP_DEBUG_MODE", "False") == "True":
        _LOGGER.warning("Disabling CORS")
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    # Mount webserver, if it's not disabled
    if os.getenv("APP_DISABLE_WEB", "False") == "False":
        import server.web.start as webserver
        _LOGGER.info("Mounting webserver")
        
        flask_url = "/" + os.getenv("DASHBOARD_URL", "dashboard")
        app.mount(flask_url, WSGIMiddleware(webserver.create_app()))

    return app